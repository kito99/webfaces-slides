= JavaServer Faces and HTML5 Web Components: Synergy?
Kito Mann (@kito99), Virtua, Inc.
:backend: revealjs
:source-highlighter: pygments
:pygments-style: paraiso-dark
:revealjs_theme: league
:revealjs_history: true
:figure-caption!:

:imagesdir: images
:server-url: 127.0.0.1:8000/
:custom-elements-src-dir:

:element2-demo: {server-url}/deluxe-counter-demo-es-2015.html
:element2-demo-src: {custom-elements-src-dir}/deluxe-counter-demo.html
:element2-src: {custom-elements-src-dir}/src/deluxe-counter.js

:examples-dir: examples

== Kito D. Mann (@kito99)
[%step]
* Principal Consultant at Virtua (http://www.virtua.com)
* Training, consulting, architecture, mentoring
** PrimeFaces, JSF, Java EE, Web Components, Polymer, Liferay, etc.
* Official US PrimeFaces partner
* Author, JavaServer Faces in Action
* Founder, JSF Central (http://www.jsfcentral.com)

== Kito D. Mann (@kito99)
[%step]
* Co-host, Enterprise Java Newscast (http://enterprisejavanews.com)
* New site: http://knowesis.io
* Internationally recognized speaker
** JavaOne, JavaZone, Devoxx, Devnexus, NFJS, etc.
* JCP Member
** JSF, MVC, JSF Portlet Bridge, Portlets

== UI Components are Everywhere
image::page-with-components.png[]

== UI Components are Everywhere
image::page-with-components-annotated.png[]

== UI Components are Everywhere
[%step]
* Component models have been popular since the early ninenties
** Visual Basic
** Delphi
** PowerBuilder

** WinForms
** Windows Presentaiton Framework
** ASP.NET

** Swing
** JavaFX
** JavaServer Faces
** Tapestry

== UI Components are Everywhere
[%step]
* In the browser, component suites must invent their own models:
** YUI
** KendoUI
** Bootstrap
** jQuery UI
** Wijmo
** PrimeUI
** Infragistics

== Why do We Build Components?
[%step]
* Reusable UI functionality
** Within a single application
** Across multiple applications
* You can focus on the core application functionality

== Why are there so many different component models?
[%step]
* Underlying platform (OS, browser) doesn't have one

== HTML Markup Doesn't Support Components
image::page-with-components-source.png[]

== What is JavaServer Faces?
[%step]
* Standard web framework for Java EE
* Component-based
* Builds a _server-side_ component tree representing the page
* Components render necessary HTML, JavaScript, CSS
* Includes basic web application features

== What is JavaServer Faces

image::pf-dialog-example1.png[]

== What is JavaServer Faces

[source, language="xhtml"]
----
<p:dialog header="Modal Dialog" widgetVar="dlg2" modal="true" height="100">
    <h:outputText value="This is a Modal Dialog." />
</p:dialog>
----

== What is JavaServer Faces?

http://www.primefaces.org/showcase/[PrimeFaces demo^]

== What is a Web Component?
[%step]
* _Web components bring a native component model to HTML_

== What is a Web Component?

image::polymer-paper-example1.png[]

== What is a Web Component?

[source, language="html"]
----
<paper-action-dialog backdrop autoCloseDisabled layered="false">
  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>

  <paper-button affirmative autofocus>Tap me to close</paper-button>
</paper-action-dialog>
----

== Web Components == Collection of HTML5 Standards
[%step]
* Custom Elements
* HTML Templates
* HTML Imports
* Shadow DOM
** (Custom CSS Properties)

== Demo

[NOTE.speaker]
--
Show counter and source and inspect element in DOM
--
http://{element2-demo}[demo^]

== Closing the Browser Gap
[%step]
* Chrome/Android and Opera support everything
* IE doesn't support anything
* All other browsers support HTML Templates
* Browser vendors in agreement on Custom Elements and Shadow DOM
* Custom Elements in development or recently released for Edge, Safari, and Firefox
* Shadow DOM
** "Under consideration" for Edge; likely to be added later
* HTML Imports only supported in Chrome
** "Under consideration" for Edge; not planned in Firefox and Safari

== Closing the Browser Gap
[%hardbreaks]

[big]#polyfill#
 [pol-ee-fil]
_noun_
In web development, a polyfill (or polyfiller) is downloadable code which provides facilities that are not built into a web browser. It implements technology that a developer expects the browser to provide natively, providing a more uniform API landscape. For example, many features of HTML5 are not supported by versions of Internet Explorer older than version 8 or 9, but can be used by web pages if those pages install a polyfill. Web shims and HTML5 Shivs are related concepts.

-- Wikipedia

== Closing the Browser Gap
[%step]
* webcomponents.js
** Polyfill for all specs created by Polymer group at Google
** webcomponents-lite.js excludes shadow DOM

== Closing the Browser Gap

webcomponents.js browser support

image::polyfill-browser-support.png[]

~ Indicates support may be flaky.

== What is Poylmer?

image::webcomponents-stack.svg[]

== Polymer
[%step]
* Library for building web components from Google
** Most popular way of writing them
* Extensive feature set
* Extensive set of tools
* build, deployment, testing, etc.

=== Polymer
[%step]
* Developed by and used internally by Google
* Used in over 500 Google projects
** Over 1 billion users
** Over 4,000 custom web components
** Examples: Chrome, Play, Fi, YouTube Gaming, and Translate
* Used in over 4 million web pages
* Heavily promoted (https://www.polymer-project.org/summit[Polymer Summit^], https://www.youtube.com/playlist?list=PLOU2XLYxmsII5c3Mgw6fNYCzaWrsM3sMN[Polycasts^], etc.)

== Polymer Elements

https://elements.polymer-project.org/[demo^]

== Comparing Component Models

== JSF Component Model Features
[%step]
* Server-side 
** Java only
* Components render HTML markup
** Unaware of browser's DOM
* Does not (usually) integrate well with client-side app frameworks

=== JSF Component Component Features

demo

[NOTE.speaker]
--
* Show component plus test page and ui:debug (ctrl-shift-j)
* Discuss client ids and how we achieve encapsulation
--

=== JSF Component Model Features
[%step]
* Attribute/property transparency
* Event system
* Lifecycle events
* Named child components (facets)
* Server-side templating (Facelets)
** Separate tag handlers (Facelet tags) that build component tree

=== Attribute/Property Transparency

=== Attribute/Property Transparency
[source, language="java"]
----
@FacesComponent(value = "org.webfaces.ComponentModelDemo")
public class ComponentModelDemo extends UINamingContainer {

    public String getMessage() {
        return (String)super.getStateHelper().get("message");
    }

    public void setMessage(String message) {
        super.getStateHelper().put("message", message);
    }
	...
}
----

[source, language="java"]
----
ComponentModelDemo comp;
...
comp.getAttribute("message") == com.getMessage();
----

[source, language="xml"]
----
<span>#{cc.attrs.message}</span> == <span>#{cc.message}</span>
----

=== Event system

* UI events

[source, language="java", indent=0]
----
<h:commandButton actionListener="#{demoController.handleActionEvent}" 
	value="Fire Action Event"/>
----

[source, language="java", indent=0]
----
@Named
public class DemoController {
	...
    public void handleActionEvent(ActionEvent e) {
        this.setMessage("Action event fired by " + e.getComponent().getClientId());
    }
	...
}
----

=== Lifecycle Callbacks
[%step]
* Made possible by system event bus

=== Lifecycle Callbacks
[source, language="xml", indent=0]
----
<ui:composition xmlns:h="http://java.sun.com/jsf/html"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:cc="http://java.sun.com/jsf/composite"
                xmlns:jsf="http://xmlns.jcp.org/jsf" xmlns:f="http://xmlns.jcp.org/jsf/core">

    <cc:interface componentType="org.webfaces.ComponentModelDemo">
	...
    </cc:interface>
    <cc:implementation>
        <f:event type="preRenderComponent" listener="#{cc.preRender}"/>
	...
	</cc:implementation
</ui:composition>
----

=== Lifecycle Callbacks
[source, language="java", indent=0]
----
@FacesComponent(value = "org.webfaces.ComponentModelDemo")
public class ComponentModelDemo extends UINamingContainer {

    public void preRender(ComponentSystemEvent event) {
        System.out.println("Inside preRender event");
    }
	...
}
----

=== Named Child Components (Facets)

demo

=== Server-side Templating (Facelets)
[%step]
* Syntax used for JSF views and components
* Uses tag handlers which generate JSF component tree
* Several additional features
** Full-fledged templating, includes, decorators, etc.

== Web Components Component Model Features
[%step]
* Client-side (browser) 
* Server-side (Node; experimental)
** https://github.com/pimterry/server-components[Server Components project on github^]
* Components are _part_ of the DOM (subclass `HTMLElement`)
* Works with different client-side app frameworks

=== Web Components Component Model Features
[%step]
* Properties must be mapped to attributes manually
* Client-side resource/dependency handling (HTML Imports)
* Integration with native DOM events
* Lifecycle callbacks
* Named child components (slots with Shadow DOM)
* Client-side templating (Template element)

=== Properties and Attributes
[source, language="javascript", indent=0]
----
get message() {
	return this.hasAttribute('message');
}

set message(message) {
	if (message) {
		this.setAttribute('message', message);
	}else{
		this.removeAttribute('message');
	}
}

/** Fires when an attribute was added, removed, or updated */
attributeChangedCallback(attr, oldVal, newVal) {
	if (attr === 'message') {
		let messageElement = this.shadowRoot.querySelector('#message');
		messageElement.innerText = newVal;
	}
}
----

=== HTML Imports

demo

[NOTE.speaker]
--
* Show example HTML imports and polymer imports
--

=== Integration with Native DOM Events

demo

[NOTE.speaker]
--
* Show example and add events
--

=== Lifecycle Callbacks

[source, language="javascript", indent=0]
----
	class ComponentModelDemo extends HTMLElement {
		
		...
	
		/** Fires when an instance was inserted into the document */
		connectedCallback() {

		};

		/** Fires when an instance was removed from the document */
		disconnectedCallback() {
		};

		/** Fires when an attribute was added, removed, or updated */
		attributeChangedCallback(attr, oldVal, newVal) {
			if (attr === 'message') {
				let messageElement = this.shadowRoot.querySelector('#message');
				messageElement.innerText = newVal;
			}
		}

		/** Fires when the element is moved to a new document */
		adoptedCallback() {
		}
	}
----

=== Named child components (slots with Shadow DOM)

demo

=== HTML Template

demo

=== Features provided by libraries like Polymer
[%step]
* Syntactic sugar
* Client-side data binding
* Mixins / behaviors
* Two-way data binding
* Declarative event handling
* Property observation

== Synergy?
[%step]
* Use web components in a JSF app
* Write web components _using_ JSF

== Introducing webfaces

demo

== Questions?

* Slides and sample app: https://github.com/kito99/webfaces
* Polymer project: https://www.polymer-project.org/1.0/
* Webcomponents.org: http://webcomponents.org/
* JSF @ zeef https://jsf.zeef.com/bauke.scholtz
* Virtua (training, consulting, development): http://virtua.tech

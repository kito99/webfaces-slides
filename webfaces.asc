= JavaServer Faces and HTML5 Web Components: Synergy?
Kito Mann (@kito99), Virtua, Inc.
:backend: revealjs
:source-highlighter: highlight.js
:revealjs_history: true
:figure-caption!:

:imagesdir: images
:server-url: 127.0.0.1:8000/
:custom-elements-src-dir:

:element1-demo: {server-url}/simple-counter-demo-es-2015.html

:element1-demo-src: {custom-elements-src-dir}/src/simple-counter.js
:element1-src: {custom-elements-src-dir}/src/simple-counter.js

:element2-demo: {server-url}/deluxe-counter-demo-es-2015.html
:element2-demo-src: {custom-elements-src-dir}/deluxe-counter-demo.html
:element2-src: {custom-elements-src-dir}/src/deluxe-counter.js

:putting-it-all-together-demo: {server-url}/labs/putting-it-all-together/deluxe-counter-demo.html

:examples-dir: examples

:shadom-dom-simple-src: {examples-dir}/shadow-dom-simple.html
:shadom-dom-simple-projection-src: {examples-dir}/shadow-dom-simple-projection.html
:shadom-dom-projection-src: {examples-dir}/shadow-dom-projection.html

:vanilla-js-src: {examples-dir}/hello-world-vanilla-js.html

:polymer-src: {examples-dir}/seed-element-polymer.html

:template-simple-src: {examples-dir}/template-simple.html

== Kito D. Mann (@kito99)
[%step]
* Principal Consultant at Virtua (http://www.virtua.com)
* Training, consulting, architecture, mentoring
** PrimeFaces, JSF, Java EE, Web Components, Polymer, Liferay, etc.
* Official US PrimeFaces partner
* Author, JavaServer Faces in Action
* Founder, JSF Central (http://www.jsfcentral.com)

== Kito D. Mann (@kito99)
[%step]
* Co-host, Enterprise Java Newscast (http://enterprisejavanews.com)
* New site: http://knowesis.io
* Internationally recognized speaker
** JavaOne, JavaZone, Devoxx, Devnexus, NFJS, etc.
* JCP Member
** JSF, MVC, JSF Portlet Bridge, Portlets

== UI Components are Everywhere
image::page-with-components.png[]

== UI Components are Everywhere
image::page-with-components-annotated.png[]

== UI Components are Everywhere
[%step]
* Component models have been popular since the early ninenties
** Visual Basic
** Delphi
** PowerBuilder

** WinForms
** Windows Presentaiton Framework
** ASP.NET

** Swing
** JavaFX
** JavaServer Faces
** Tapestry

== UI Components are Everywhere
[%step]
* In the browser, component suites must invent their own models:
** YUI
** KendoUI
** Bootstrap
** jQuery UI
** Wijmo
** PrimeUI
** Infragistics

== Why do We Build Components?
[%step]
* Reusable UI functionality
** Within a single application
** Across multiple applications
* You can focus on the core application functionality

== Why are there so many different component models?
[%step]
* Underlying platform (OS, browser) doesn't have one

== HTML Markup Doesn't Support Components
image::page-with-components-source.png[]

== What is JavaServer Faces?
[%step]
* Standard web framework for Java EE
* Component-based
* Builds a _server-side_ component tree representing the page
* Components render necessary HTML, JavaScript, CSS
* Includes basic web application features

== What is JavaServer Faces

[source, language="xhtml"]
----
<p:dialog header="Modal Dialog" widgetVar="dlg2" modal="true" height="100">
    <h:outputText value="This is a Modal Dialog." />
</p:dialog>
----

== What is JavaServer Faces

image::pf-dialog-example1.png[]

== What is JavaServer Faces?

http://www.primefaces.org/showcase/[PrimeFaces demo^]

== What is a Web Component?
[%step]
* _Web components bring a native component model to HTML_

== What is a Web Component?

image::polymer-paper-example1.png[]

== What is a Web Component?

[source, language="html"]
----
<paper-action-dialog backdrop autoCloseDisabled layered="false">
  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>

  <paper-button affirmative autofocus>Tap me to close</paper-button>
</paper-action-dialog>
----

== Web Components == Collection of HTML5 Standards
[%step]
* Custom Elements
* HTML Templates
* HTML Imports
* Shadow DOM
** (Custom CSS Properties)

== Demo

[NOTE.speaker]
--
Show counter and source and inspect element in DOM
--
http://{element2-demo}[demo^]

== Closing the Browser Gap
[NOTE.speaker]
--
Some features must be enabled with developer dom.webcomponents.enabled preference in about:config
HTML Imports are supported that way, but may not be in the future (they may use JavaScript 6 modules instead)
--
[%step]
* Chrome/Android and Opera support everything
* IE doesn't support anything
* All other browsers support HTML Templates
* Shadow DOM and Custom Elements in development for Firefox and Safari
** "Under consideration" for Edge; likely to be added later
* HTML Imports not supported in other browsers
** "Under consideration" for Edge; not planned in Firefox and Safari

== Closing the Browser Gap
[%hardbreaks]

[big]#polyfill#
 [pol-ee-fil]
_noun_
In web development, a polyfill (or polyfiller) is downloadable code which provides facilities that are not built into a web browser. It implements technology that a developer expects the browser to provide natively, providing a more uniform API landscape. For example, many features of HTML5 are not supported by versions of Internet Explorer older than version 8 or 9, but can be used by web pages if those pages install a polyfill. Web shims and HTML5 Shivs are related concepts.

-- Wikipedia

== Closing the Browser Gap
[%step]
* webcomponents.js
** Polyfill for all specs created by Polymer group at Google
** webcomponents-lite.js excludes shadow DOM

== Closing the Browser Gap

webcomponents.js browser support

image::polyfill-browser-support.png[]

~ Indicates support may be flaky.

== What is Poylmer?

image::webcomponents-stack.svg[]

== Polymer
[%step]
* Library for building web components from Google
* Extensive feature set
** Simplified programming model
** Two-way data binding
** Declarative event handling
** Behaviors (mixins)
** Property observation
* Also hosts extensive sets of web components
* Extensive set of tools
** Build, testing, designer, etc.
* Used in over 4 million web pages

== Polymer Elements

https://elements.polymer-project.org/[demo^]

== Comparing Component Models

== Rendered JSF Output

https://zeef.com/[demo^]

== Rendered Web Component Output

https://gaming.youtube.com/[demo^]

== JSF Component Model Features
[%step]
* Server-side 
** Java only
* Separate tag handlers (Facelet tags) that build component tree
* Components render HTML markup
** Unaware of browser's DOM
* Management of resources 

== JSF Component Model Features
[%step]
* Attribute/property transparency
* Facets 
* Ajax integration
* Component events 
** <f:event> tag
* Server-side data binding
* Does not integrate well with client-side app frameworks

== Web Components Component Model Features
[%step]
* Client-side (browser) 
* Server-side (Node)
** https://github.com/pimterry/server-components[Server Components project on github^]
* Components are _part_ of the DOM (subclass `HTMLElement`)
* Management of resources (HTML Imports)
* Properties must be mapped to attributes manually
* Lifecycle callbacks
* Integration with native DOM event model
* Works with different client-side app frameworks

== Comparing Component Models

http://localhost:8080/webfaces-slides-demo/index.html[demo^]

== Introducing webfaces

demo

== Questions?

* Slides and sample app: https://github.com/kito99/webfaces
* Polymer project: https://www.polymer-project.org/1.0/
* Webcomponents.org: http://webcomponents.org/
* JSF @ zeef https://jsf.zeef.com/bauke.scholtz
* Virtua (training, consulting, development): http://virtua.tech
